<?xml version="1.0" encoding="UTF-8"?>
<results version="2">
    <cppcheck version="1.90"/>
    <errors>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="addons/acodec/flac.c" line="25"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="addons/acodec/mp3.c" line="22"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="addons/acodec/ogg.c" line="22"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="addons/acodec/opus.c" line="21"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="addons/acodec/voc.c" line="48"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="addons/acodec/wav.c" line="13"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;err&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;err&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="addons/audio/alsa.c" line="246"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;e&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;e&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="addons/audio/alsa.c" line="777"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: retVal" verbose="Unused variable: retVal">
            <location file="addons/audio/audio.c" line="201"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="addons/audio/audio_io.c" line="12"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="addons/audio/dsound.cpp" line="39"/>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &amp;#039;spl&amp;#039; shadows outer argument" verbose="Local variable &amp;#039;spl&amp;#039; shadows outer argument">
            <location file="addons/audio/kcm_instance.c" line="82" info="Shadow variable"/>
            <location file="addons/audio/kcm_instance.c" line="68" info="Shadowed declaration"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="addons/audio/kcm_mixer.c" line="19"/>
        </error>
        <error id="funcArgOrderDifferent" severity="warning" msg="Function &amp;#039;do_play_sample&amp;#039; argument order different: declaration &amp;#039;spl, data, gain, pan, speed, loop&amp;#039; definition &amp;#039;splinst, spl, gain, pan, speed, loop&amp;#039;" verbose="Function &amp;#039;do_play_sample&amp;#039; argument order different: declaration &amp;#039;spl, data, gain, pan, speed, loop&amp;#039; definition &amp;#039;splinst, spl, gain, pan, speed, loop&amp;#039;">
            <location file="addons/audio/kcm_sample.c" line="375" info=""/>
            <location file="addons/audio/kcm_sample.c" line="45" info=""/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="addons/audio/kcm_stream.c" line="334"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="addons/audio/kcm_stream.c" line="622"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;fragment&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;fragment&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="addons/audio/kcm_stream.c" line="694"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="addons/audio/kcm_stream.c" line="810"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="addons/audio/kcm_stream.c" line="827"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="addons/audio/kcm_stream.c" line="844"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="addons/audio/kcm_stream.c" line="861"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="addons/audio/kcm_stream.c" line="879"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;openal_err&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;openal_err&amp;#039; is reassigned a value before the old one has been used.">
            <location file="addons/audio/openal.c" line="111" info="openal_err is overwritten"/>
            <location file="addons/audio/openal.c" line="82" info="openal_err is assigned"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;alc_err&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;alc_err&amp;#039; is reassigned a value before the old one has been used.">
            <location file="addons/audio/openal.c" line="88" info="alc_err is overwritten"/>
            <location file="addons/audio/openal.c" line="87" info="alc_err is assigned"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;alc_err&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;alc_err&amp;#039; is reassigned a value before the old one has been used.">
            <location file="addons/audio/openal.c" line="96" info="alc_err is overwritten"/>
            <location file="addons/audio/openal.c" line="95" info="alc_err is assigned"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;openal_err&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;openal_err&amp;#039; is assigned a value that is never used.">
            <location file="addons/audio/openal.c" line="82"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;result&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;result&amp;#039; is reassigned a value before the old one has been used.">
            <location file="addons/audio/opensl.c" line="429" info="result is overwritten"/>
            <location file="addons/audio/opensl.c" line="426" info="result is assigned"/>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &amp;#039;data&amp;#039; shadows outer argument" verbose="Local variable &amp;#039;data&amp;#039; shadows outer argument">
            <location file="addons/audio/opensl.c" line="456" info="Shadow variable"/>
            <location file="addons/audio/opensl.c" line="444" info="Shadowed declaration"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="addons/audio/pulseaudio.c" line="27"/>
        </error>
        <error id="CastIntegerToAddressAtReturn" severity="portability" msg="Returning an integer in a function with pointer return type is not portable." verbose="Returning an integer (int/long/etc) in a function with pointer return type is not portable across different platforms and compilers. For example in 32-bit Windows and Linux they are same width, but in 64-bit Windows and Linux they are of different width. In worst case you end up casting 64-bit integer down to 32-bit pointer. The safe way is to always return a pointer.">
            <location file="addons/audio/recorder.c" line="29"/>
        </error>
        <error id="CastIntegerToAddressAtReturn" severity="portability" msg="Returning an integer in a function with pointer return type is not portable." verbose="Returning an integer (int/long/etc) in a function with pointer return type is not portable across different platforms and compilers. For example in 32-bit Windows and Linux they are same width, but in 64-bit Windows and Linux they are of different width. In worst case you end up casting 64-bit integer down to 32-bit pointer. The safe way is to always return a pointer.">
            <location file="addons/audio/recorder.c" line="35"/>
        </error>
        <error id="CastIntegerToAddressAtReturn" severity="portability" msg="Returning an integer in a function with pointer return type is not portable." verbose="Returning an integer (int/long/etc) in a function with pointer return type is not portable across different platforms and compilers. For example in 32-bit Windows and Linux they are same width, but in 64-bit Windows and Linux they are of different width. In worst case you end up casting 64-bit integer down to 32-bit pointer. The safe way is to always return a pointer.">
            <location file="addons/audio/recorder.c" line="50"/>
        </error>
        <error id="CastIntegerToAddressAtReturn" severity="portability" msg="Returning an integer in a function with pointer return type is not portable." verbose="Returning an integer (int/long/etc) in a function with pointer return type is not portable across different platforms and compilers. For example in 32-bit Windows and Linux they are same width, but in 64-bit Windows and Linux they are of different width. In worst case you end up casting 64-bit integer down to 32-bit pointer. The safe way is to always return a pointer.">
            <location file="addons/audio/recorder.c" line="64"/>
        </error>
        <error id="CastIntegerToAddressAtReturn" severity="portability" msg="Returning an integer in a function with pointer return type is not portable." verbose="Returning an integer (int/long/etc) in a function with pointer return type is not portable across different platforms and compilers. For example in 32-bit Windows and Linux they are same width, but in 64-bit Windows and Linux they are of different width. In worst case you end up casting 64-bit integer down to 32-bit pointer. The safe way is to always return a pointer.">
            <location file="addons/audio/recorder.c" line="70"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="addons/audio/sdl_audio.c" line="5"/>
        </error>
        <error id="invalidScanfArgType_int" severity="warning" msg="%x in format string (no. 1) requires &amp;#039;unsigned int *&amp;#039; but the argument type is &amp;#039;signed int *&amp;#039;." verbose="%x in format string (no. 1) requires &amp;#039;unsigned int *&amp;#039; but the argument type is &amp;#039;signed int *&amp;#039;.">
            <location file="addons/color/color.c" line="556"/>
        </error>
        <error id="invalidScanfArgType_int" severity="warning" msg="%x in format string (no. 2) requires &amp;#039;unsigned int *&amp;#039; but the argument type is &amp;#039;signed int *&amp;#039;." verbose="%x in format string (no. 2) requires &amp;#039;unsigned int *&amp;#039; but the argument type is &amp;#039;signed int *&amp;#039;.">
            <location file="addons/color/color.c" line="556"/>
        </error>
        <error id="invalidScanfArgType_int" severity="warning" msg="%x in format string (no. 3) requires &amp;#039;unsigned int *&amp;#039; but the argument type is &amp;#039;signed int *&amp;#039;." verbose="%x in format string (no. 3) requires &amp;#039;unsigned int *&amp;#039; but the argument type is &amp;#039;signed int *&amp;#039;.">
            <location file="addons/color/color.c" line="556"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="addons/color/color.c" line="189"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="addons/font/bmfont.c" line="10"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="addons/font/font.c" line="27"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;lr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;lr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="addons/font/stdfont.c" line="396"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="addons/font/stdfont.c" line="397"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;j&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;j&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="addons/font/stdfont.c" line="397"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;k&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;k&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="addons/font/stdfont.c" line="397"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;s&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;s&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="addons/font/text.c" line="219"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;soft_line&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;soft_line&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="addons/font/text.c" line="523"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;soft_line_pos&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;soft_line_pos&amp;#039; is assigned a value that is never used.">
            <location file="addons/font/text.c" line="525"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="addons/image/bmp.c" line="30"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="addons/image/dds.c" line="22"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;AllegroWindowsStream&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;AllegroWindowsStream&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="addons/image/gdiplus.cpp" line="74"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;_MSC_VER;__uuidof&amp;#039; since the value of &amp;#039;__uuidof&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;_MSC_VER;__uuidof&amp;#039; since the value of &amp;#039;__uuidof&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="addons/image/gdiplus.cpp" line="93"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;_MSC_VER;__uuidof&amp;#039; since the value of &amp;#039;__uuidof&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;_MSC_VER;__uuidof&amp;#039; since the value of &amp;#039;__uuidof&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="addons/image/gdiplus.cpp" line="94"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;extensions&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;extensions&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="addons/image/iio.c" line="107"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="addons/image/iio.c" line="112"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;extensions&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;extensions&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="addons/image/iio.c" line="57"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="addons/image/iio.c" line="59"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;in&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;in&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="addons/image/jpg.c" line="242"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;out&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;out&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="addons/image/jpg.c" line="243"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="addons/image/pcx.c" line="7"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="addons/image/png.c" line="171"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;count&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;count&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="addons/image/tga.c" line="50"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;count&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;count&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="addons/image/tga.c" line="101"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;count&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;count&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="addons/image/tga.c" line="153"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;count&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;count&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="addons/image/tga.c" line="209"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="addons/image/tga.c" line="246"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;level&amp;#039; is always true" verbose="Condition &amp;#039;level&amp;#039; is always true">
            <location file="addons/image/webp.c" line="142" info="Condition &amp;#039;level&amp;#039; is always true"/>
            <location file="addons/image/webp.c" line="135" info="Assuming that condition &amp;#039;!level&amp;#039; is not redundant"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="addons/native_dialog/gtk_menu.c" line="25"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;css_provider&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;css_provider&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="addons/native_dialog/gtk_textlog.c" line="83"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;context&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;context&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="addons/native_dialog/gtk_textlog.c" line="84"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="addons/native_dialog/gtk_xgtk.c" line="16"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &amp;#039;menu_id&amp;#039; is redundant or there is possible null pointer dereference: menu_id." verbose="Either the condition &amp;#039;menu_id&amp;#039; is redundant or there is possible null pointer dereference: menu_id.">
            <location file="addons/native_dialog/menu.c" line="942" info="Null pointer dereference"/>
            <location file="addons/native_dialog/menu.c" line="921" info="Assuming that condition &amp;#039;menu_id&amp;#039; is not redundant"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;slot&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;slot&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="addons/native_dialog/menu.c" line="92"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;menu_id&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;menu_id&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="addons/native_dialog/menu.c" line="175"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="addons/native_dialog/menu.c" line="292"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;menu_id&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;menu_id&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="addons/native_dialog/menu.c" line="400"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="addons/native_dialog/menu.c" line="669"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;menu_id&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;menu_id&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="addons/native_dialog/menu.c" line="886"/>
        </error>
        <error id="duplicateCondition" severity="style" msg="The if condition is the same as the previous if condition" verbose="The if condition is the same as the previous if condition">
            <location file="addons/native_dialog/win_dialog.c" line="626" info="Second condition"/>
            <location file="addons/native_dialog/win_dialog.c" line="605" info="First condition"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;start&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;start&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="addons/native_dialog/win_dialog.c" line="132"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;end&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;end&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="addons/native_dialog/win_dialog.c" line="132"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ch&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ch&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="addons/native_dialog/win_dialog.c" line="403"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between char * and float * which have an incompatible binary data representation." verbose="Casting between char * and float * which have an incompatible binary data representation.">
            <location file="addons/primitives/high_primitives.c" line="457"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between char * and float * which have an incompatible binary data representation." verbose="Casting between char * and float * which have an incompatible binary data representation.">
            <location file="addons/primitives/high_primitives.c" line="460"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between char * and float * which have an incompatible binary data representation." verbose="Casting between char * and float * which have an incompatible binary data representation.">
            <location file="addons/primitives/high_primitives.c" line="475"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between char * and float * which have an incompatible binary data representation." verbose="Casting between char * and float * which have an incompatible binary data representation.">
            <location file="addons/primitives/high_primitives.c" line="478"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between char * and float * which have an incompatible binary data representation." verbose="Casting between char * and float * which have an incompatible binary data representation.">
            <location file="addons/primitives/high_primitives.c" line="496"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between char * and float * which have an incompatible binary data representation." verbose="Casting between char * and float * which have an incompatible binary data representation.">
            <location file="addons/primitives/high_primitives.c" line="1150"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between char * and float * which have an incompatible binary data representation." verbose="Casting between char * and float * which have an incompatible binary data representation.">
            <location file="addons/primitives/high_primitives.c" line="1216"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between char * and float * which have an incompatible binary data representation." verbose="Casting between char * and float * which have an incompatible binary data representation.">
            <location file="addons/primitives/high_primitives.c" line="1219"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between char * and float * which have an incompatible binary data representation." verbose="Casting between char * and float * which have an incompatible binary data representation.">
            <location file="addons/primitives/high_primitives.c" line="1232"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between char * and float * which have an incompatible binary data representation." verbose="Casting between char * and float * which have an incompatible binary data representation.">
            <location file="addons/primitives/high_primitives.c" line="1240"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between char * and float * which have an incompatible binary data representation." verbose="Casting between char * and float * which have an incompatible binary data representation.">
            <location file="addons/primitives/high_primitives.c" line="1241"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cur_dir_x&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cur_dir_x&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="addons/primitives/high_primitives.c" line="1136"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cur_dir_y&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cur_dir_y&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="addons/primitives/high_primitives.c" line="1137"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;st-&amp;gt;solid.color.r&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;st-&amp;gt;solid.color.r&amp;#039; is reassigned a value before the old one has been used.">
            <location file="addons/primitives/line_soft.c" line="314" info="st-&amp;gt;solid.color.r is overwritten"/>
            <location file="addons/primitives/line_soft.c" line="294" info="st-&amp;gt;solid.color.r is assigned"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;st-&amp;gt;solid.color.g&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;st-&amp;gt;solid.color.g&amp;#039; is reassigned a value before the old one has been used.">
            <location file="addons/primitives/line_soft.c" line="315" info="st-&amp;gt;solid.color.g is overwritten"/>
            <location file="addons/primitives/line_soft.c" line="295" info="st-&amp;gt;solid.color.g is assigned"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;st-&amp;gt;solid.color.b&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;st-&amp;gt;solid.color.b&amp;#039; is reassigned a value before the old one has been used.">
            <location file="addons/primitives/line_soft.c" line="316" info="st-&amp;gt;solid.color.b is overwritten"/>
            <location file="addons/primitives/line_soft.c" line="296" info="st-&amp;gt;solid.color.b is assigned"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;st-&amp;gt;solid.color.a&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;st-&amp;gt;solid.color.a&amp;#039; is reassigned a value before the old one has been used.">
            <location file="addons/primitives/line_soft.c" line="313" info="st-&amp;gt;solid.color.a is overwritten"/>
            <location file="addons/primitives/line_soft.c" line="297" info="st-&amp;gt;solid.color.a is assigned"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;lr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;lr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="addons/primitives/line_soft.c" line="584"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;err&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;err&amp;#039; is assigned a value that is never used.">
            <location file="addons/primitives/line_soft.c" line="423"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;err&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;err&amp;#039; is assigned a value that is never used.">
            <location file="addons/primitives/line_soft.c" line="441"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;err&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;err&amp;#039; is assigned a value that is never used.">
            <location file="addons/primitives/line_soft.c" line="460"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;err&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;err&amp;#039; is assigned a value that is never used.">
            <location file="addons/primitives/line_soft.c" line="485"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;lr&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;lr&amp;#039; is assigned a value that is never used.">
            <location file="addons/primitives/line_soft.c" line="639"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and const float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and const float * which have an incompatible binary data representation.">
            <location file="addons/primitives/polyline.c" line="433"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and const float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and const float * which have an incompatible binary data representation.">
            <location file="addons/primitives/polyline.c" line="434"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and const float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and const float * which have an incompatible binary data representation.">
            <location file="addons/primitives/polyline.c" line="437"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and const float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and const float * which have an incompatible binary data representation.">
            <location file="addons/primitives/polyline.c" line="447"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and const float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and const float * which have an incompatible binary data representation.">
            <location file="addons/primitives/polyline.c" line="459"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and const float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and const float * which have an incompatible binary data representation.">
            <location file="addons/primitives/polyline.c" line="460"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and const float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and const float * which have an incompatible binary data representation.">
            <location file="addons/primitives/polyline.c" line="461"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and const float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and const float * which have an incompatible binary data representation.">
            <location file="addons/primitives/polyline.c" line="516"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and const float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and const float * which have an incompatible binary data representation.">
            <location file="addons/primitives/polyline.c" line="523"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;t&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;t&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="addons/primitives/polyline.c" line="176"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &amp;#039;detection_setting?detection_setting:&amp;quot;default&amp;quot;&amp;#039; is redundant or there is possible null pointer dereference: detection_setting." verbose="Either the condition &amp;#039;detection_setting?detection_setting:&amp;quot;default&amp;quot;&amp;#039; is redundant or there is possible null pointer dereference: detection_setting.">
            <location file="addons/primitives/prim_directx.cpp" line="57" info="Null pointer dereference"/>
            <location file="addons/primitives/prim_directx.cpp" line="56" info="Assignment &amp;#039;detection_setting=detection_setting?detection_setting:&amp;quot;default&amp;quot;&amp;#039;, assigned value is 0"/>
            <location file="addons/primitives/prim_directx.cpp" line="56" info="Assuming that condition &amp;#039;detection_setting?detection_setting:&amp;quot;default&amp;quot;&amp;#039; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &amp;#039;detection_setting?detection_setting:&amp;quot;default&amp;quot;&amp;#039; is redundant or there is possible null pointer dereference: detection_setting." verbose="Either the condition &amp;#039;detection_setting?detection_setting:&amp;quot;default&amp;quot;&amp;#039; is redundant or there is possible null pointer dereference: detection_setting.">
            <location file="addons/primitives/prim_directx.cpp" line="63" info="Null pointer dereference"/>
            <location file="addons/primitives/prim_directx.cpp" line="56" info="Assignment &amp;#039;detection_setting=detection_setting?detection_setting:&amp;quot;default&amp;quot;&amp;#039;, assigned value is 0"/>
            <location file="addons/primitives/prim_directx.cpp" line="56" info="Assuming that condition &amp;#039;detection_setting?detection_setting:&amp;quot;default&amp;quot;&amp;#039; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &amp;#039;detection_setting?detection_setting:&amp;quot;default&amp;quot;&amp;#039; is redundant or there is possible null pointer dereference: detection_setting." verbose="Either the condition &amp;#039;detection_setting?detection_setting:&amp;quot;default&amp;quot;&amp;#039; is redundant or there is possible null pointer dereference: detection_setting.">
            <location file="addons/primitives/prim_directx.cpp" line="65" info="Null pointer dereference"/>
            <location file="addons/primitives/prim_directx.cpp" line="56" info="Assignment &amp;#039;detection_setting=detection_setting?detection_setting:&amp;quot;default&amp;quot;&amp;#039;, assigned value is 0"/>
            <location file="addons/primitives/prim_directx.cpp" line="56" info="Assuming that condition &amp;#039;detection_setting?detection_setting:&amp;quot;default&amp;quot;&amp;#039; is not redundant"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="addons/primitives/prim_directx.cpp" line="234"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="addons/primitives/prim_directx.cpp" line="258"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;indices&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;indices&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="addons/primitives/prim_directx.cpp" line="766"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;idx&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;idx&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="addons/primitives/prim_directx.cpp" line="952"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;mat[1][1]&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;mat[1][1]&amp;#039; is assigned a value that is never used.">
            <location file="addons/primitives/prim_opengl.c" line="279"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;mat[1][1]&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;mat[1][1]&amp;#039; is assigned a value that is never used.">
            <location file="addons/primitives/prim_opengl.c" line="282"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;mat[1][1]&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;mat[1][1]&amp;#039; is assigned a value that is never used.">
            <location file="addons/primitives/prim_opengl.c" line="286"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: type" verbose="Unused variable: type">
            <location file="addons/primitives/prim_opengl.c" line="117"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: ncoord" verbose="Unused variable: ncoord">
            <location file="addons/primitives/prim_opengl.c" line="118"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: normalized" verbose="Unused variable: normalized">
            <location file="addons/primitives/prim_opengl.c" line="119"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;identity&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;identity&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="addons/primitives/prim_opengl.c" line="344"/>
        </error>
        <error id="uselessAssignmentArg" severity="style" msg="Assignment of function parameter has no effect outside the function." verbose="Assignment of function parameter has no effect outside the function.">
            <location file="addons/primitives/prim_opengl.c" line="518"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between const char * and float * which have an incompatible binary data representation." verbose="Casting between const char * and float * which have an incompatible binary data representation.">
            <location file="addons/primitives/prim_soft.c" line="47"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between const char * and float * which have an incompatible binary data representation." verbose="Casting between const char * and float * which have an incompatible binary data representation.">
            <location file="addons/primitives/prim_soft.c" line="73"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;ii&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;ii&amp;#039; shadows outer variable">
            <location file="addons/primitives/prim_soft.c" line="323" info="Shadow variable"/>
            <location file="addons/primitives/prim_soft.c" line="296" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;ii&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;ii&amp;#039; shadows outer variable">
            <location file="addons/primitives/prim_soft.c" line="338" info="Shadow variable"/>
            <location file="addons/primitives/prim_soft.c" line="296" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;ii&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;ii&amp;#039; shadows outer variable">
            <location file="addons/primitives/prim_soft.c" line="346" info="Shadow variable"/>
            <location file="addons/primitives/prim_soft.c" line="296" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;ii&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;ii&amp;#039; shadows outer variable">
            <location file="addons/primitives/prim_soft.c" line="363" info="Shadow variable"/>
            <location file="addons/primitives/prim_soft.c" line="296" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;ii&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;ii&amp;#039; shadows outer variable">
            <location file="addons/primitives/prim_soft.c" line="371" info="Shadow variable"/>
            <location file="addons/primitives/prim_soft.c" line="296" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;ii&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;ii&amp;#039; shadows outer variable">
            <location file="addons/primitives/prim_soft.c" line="386" info="Shadow variable"/>
            <location file="addons/primitives/prim_soft.c" line="296" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;idx1&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;idx1&amp;#039; shadows outer variable">
            <location file="addons/primitives/prim_soft.c" line="390" info="Shadow variable"/>
            <location file="addons/primitives/prim_soft.c" line="387" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;idx2&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;idx2&amp;#039; shadows outer variable">
            <location file="addons/primitives/prim_soft.c" line="391" info="Shadow variable"/>
            <location file="addons/primitives/prim_soft.c" line="387" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;ii&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;ii&amp;#039; shadows outer variable">
            <location file="addons/primitives/prim_soft.c" line="400" info="Shadow variable"/>
            <location file="addons/primitives/prim_soft.c" line="296" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;ii&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;ii&amp;#039; shadows outer variable">
            <location file="addons/primitives/prim_soft.c" line="417" info="Shadow variable"/>
            <location file="addons/primitives/prim_soft.c" line="296" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;ii&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;ii&amp;#039; shadows outer variable">
            <location file="addons/primitives/prim_soft.c" line="425" info="Shadow variable"/>
            <location file="addons/primitives/prim_soft.c" line="296" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;ii&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;ii&amp;#039; shadows outer variable">
            <location file="addons/primitives/prim_soft.c" line="444" info="Shadow variable"/>
            <location file="addons/primitives/prim_soft.c" line="296" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;ii&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;ii&amp;#039; shadows outer variable">
            <location file="addons/primitives/prim_soft.c" line="452" info="Shadow variable"/>
            <location file="addons/primitives/prim_soft.c" line="296" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;ii&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;ii&amp;#039; shadows outer variable">
            <location file="addons/primitives/prim_soft.c" line="469" info="Shadow variable"/>
            <location file="addons/primitives/prim_soft.c" line="296" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;ii&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;ii&amp;#039; shadows outer variable">
            <location file="addons/primitives/prim_soft.c" line="477" info="Shadow variable"/>
            <location file="addons/primitives/prim_soft.c" line="296" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;ii&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;ii&amp;#039; shadows outer variable">
            <location file="addons/primitives/prim_soft.c" line="494" info="Shadow variable"/>
            <location file="addons/primitives/prim_soft.c" line="296" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;ii&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;ii&amp;#039; shadows outer variable">
            <location file="addons/primitives/prim_soft.c" line="500" info="Shadow variable"/>
            <location file="addons/primitives/prim_soft.c" line="296" info="Shadowed declaration"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ii&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ii&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="addons/primitives/primitives.c" line="482"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation.">
            <location file="addons/primitives/triangulator.c" line="306"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation.">
            <location file="addons/primitives/triangulator.c" line="414"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between unsigned char * and float * which have an incompatible binary data representation." verbose="Casting between unsigned char * and float * which have an incompatible binary data representation.">
            <location file="addons/primitives/triangulator.c" line="449"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;split_item&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;split_item&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="addons/primitives/triangulator.c" line="368"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;j&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;j&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="addons/primitives/triangulator.c" line="371"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="addons/primitives/triangulator.c" line="494"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="addons/ttf/ttf.c" line="22"/>
        </error>
        <error id="redundantCondition" severity="style" msg="Redundant condition: If &amp;#039;h &amp;gt; 0&amp;#039;, the comparison &amp;#039;h&amp;#039; is always true." verbose="Redundant condition: If &amp;#039;h &amp;gt; 0&amp;#039;, the comparison &amp;#039;h&amp;#039; is always true.">
            <location file="addons/video/ogv.c" line="1326"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="addons/video/ogv.c" line="316"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;serial&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;serial&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="addons/video/ogv.c" line="455"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="addons/video/ogv.c" line="884"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="addons/video/ogv.c" line="1214"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;myfont&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;myfont&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="demos/cosmic_protector/src/ButtonWidget.cpp" line="10"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code.">
            <location file="demos/cosmic_protector/src/Entity.cpp" line="101"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;!redraw&amp;#039; is always false" verbose="Condition &amp;#039;!redraw&amp;#039; is always false">
            <location file="demos/cosmic_protector/src/GUI.cpp" line="85" info="Condition &amp;#039;!redraw&amp;#039; is always false"/>
            <location file="demos/cosmic_protector/src/GUI.cpp" line="75" info="Assignment &amp;#039;redraw=true&amp;#039;, assigned value is 1"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;redraw&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;redraw&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="demos/cosmic_protector/src/GUI.cpp" line="23"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;redraw&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;redraw&amp;#039; is assigned a value that is never used.">
            <location file="demos/cosmic_protector/src/GUI.cpp" line="23"/>
        </error>
        <error id="va_end_missing" severity="error" msg="va_list &amp;#039;ap&amp;#039; was opened but not closed by va_end()." verbose="va_list &amp;#039;ap&amp;#039; was opened but not closed by va_end().">
            <location file="demos/cosmic_protector/src/Game.cpp" line="69"/>
        </error>
        <error id="duplicateCondition" severity="style" msg="The if condition is the same as the previous if condition" verbose="The if condition is the same as the previous if condition">
            <location file="demos/cosmic_protector/src/Input.cpp" line="317" info="Second condition"/>
            <location file="demos/cosmic_protector/src/Input.cpp" line="314" info="First condition"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code.">
            <location file="demos/cosmic_protector/src/Player.cpp" line="116"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code.">
            <location file="demos/cosmic_protector/src/ResourceManager.cpp" line="16"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;p&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;p&amp;#039; shadows outer variable">
            <location file="demos/cosmic_protector/src/UFO.cpp" line="18" info="Shadow variable"/>
            <location file="demos/cosmic_protector/src/UFO.cpp" line="5" info="Shadowed declaration"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code.">
            <location file="demos/cosmic_protector/src/cosmic_protector.cpp" line="52"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code.">
            <location file="demos/cosmic_protector/src/logic.cpp" line="81"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code.">
            <location file="demos/cosmic_protector/src/logic.cpp" line="84"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code.">
            <location file="demos/cosmic_protector/src/render.cpp" line="106"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;n==0&amp;#039; is always true" verbose="Condition &amp;#039;n==0&amp;#039; is always true">
            <location file="demos/skater/src/credits.c" line="235" info="Condition &amp;#039;n==0&amp;#039; is always true"/>
            <location file="demos/skater/src/credits.c" line="233" info="Assignment &amp;#039;n=0&amp;#039;, assigned value is 0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;prev&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;prev&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="demos/skater/src/credits.c" line="223"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;p2&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;p2&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="demos/skater/src/credits.c" line="269"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c2&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c2&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="demos/skater/src/credits.c" line="415"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cbuf&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cbuf&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="demos/skater/src/credits.c" line="423"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;p&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;p&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="demos/skater/src/credits.c" line="424"/>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" verbose="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?">
            <location file="demos/skater/src/fps.c" line="34"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;x1&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;x1&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="demos/skater/src/game.c" line="192"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;y1&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;y1&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="demos/skater/src/game.c" line="192"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;x2&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;x2&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="demos/skater/src/game.c" line="192"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;y2&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;y2&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="demos/skater/src/game.c" line="192"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;x&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;x&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="demos/skater/src/game.c" line="192"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;depth&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;depth&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="demos/skater/src/game.c" line="229"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file="demos/skater/src/game.c" line="323"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c1&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c1&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="demos/skater/src/global.c" line="440"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c2&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c2&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="demos/skater/src/global.c" line="440"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;x&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;x&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="demos/skater/src/intro.c" line="46"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;y&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;y&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="demos/skater/src/intro.c" line="46"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;offx&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;offx&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="demos/skater/src/intro.c" line="46"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;offy&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;offy&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="demos/skater/src/intro.c" line="46"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;logo_text1&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;logo_text1&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="demos/skater/src/intro.c" line="48"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;logo_text2&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;logo_text2&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="demos/skater/src/intro.c" line="49"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;Failed&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;Failed&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="demos/skater/src/level.c" line="215"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;TmpEdge&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;TmpEdge&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="demos/skater/src/level_file.c" line="34"/>
        </error>
        <error id="duplicateExpression" severity="style" msg="Same expression on both sides of &amp;#039;-&amp;#039;." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct.">
            <location file="demos/skater/src/menu.c" line="646"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;w&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;w&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="demos/skater/src/menu.c" line="244"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;h&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;h&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="demos/skater/src/menu.c" line="244"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;x&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;x&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="demos/skater/src/menu.c" line="244"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ch&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ch&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="demos/skater/src/menu.c" line="343"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;dy&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;dy&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="demos/skater/src/menu.c" line="343"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cx&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cx&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="demos/skater/src/menu.c" line="343"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;x&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;x&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="demos/skater/src/menu.c" line="520"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;h&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;h&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="demos/skater/src/menu.c" line="520"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cw&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cw&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="demos/skater/src/menu.c" line="520"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cx&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cx&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="demos/skater/src/menu.c" line="520"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="demos/skater/src/menu.c" line="520"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;buf&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;buf&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="demos/skater/src/menu.c" line="523"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;CollTime&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;CollTime&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="demos/skater/src/physics.c" line="370"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;CollPtr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;CollPtr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="demos/skater/src/physics.c" line="372"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;Contact&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;Contact&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="demos/skater/src/physics.c" line="376"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="demos/skater/src/quadtree.c" line="199"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;Child&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;Child&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="demos/skater/src/quadtree.c" line="336"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;MidX&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;MidX&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="demos/skater/src/quadtree.c" line="337"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;MidY&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;MidY&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="demos/skater/src/quadtree.c" line="337"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c2&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c2&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="demos/skater/src/quadtree.c" line="392"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="demos/skater/src/quadtree.c" line="534"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="demos/skater/src/quadtree.c" line="691"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ITree&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ITree&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="demos/skater/src/quadtree.c" line="730"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="demos/skater/src/quadtree.c" line="731"/>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" verbose="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?">
            <location file="demos/skater/src/screenshot.c" line="47"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;TestChar&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;TestChar&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="demos/skater/src/token.c" line="92"/>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" verbose="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?">
            <location file="demos/skater/src/transition.c" line="52"/>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" verbose="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?">
            <location file="demos/skater/src/vcontroller.c" line="25"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;joy&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;joy&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="demos/speed/a4_aux.c" line="86"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;b&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;b&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="demos/speed/badguys.c" line="224"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;dead&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;dead&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="demos/speed/badguys.c" line="243"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;b&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;b&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="demos/speed/bullets.c" line="77"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;e&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;e&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="demos/speed/explode.c" line="40"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;x&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;x&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="demos/speed/hiscore.c" line="106"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="demos/speed/hiscore.c" line="141"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;screen&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;screen&amp;#039; shadows outer variable">
            <location file="demos/speed/hiscore.c" line="104" info="Shadow variable"/>
            <location file="demos/speed/a4_aux.h" line="36" info="Shadowed declaration"/>
        </error>
        <error id="constArgument" severity="style" msg="Argument &amp;#039;30*(cyclenum+2)&amp;#039; to function ALLEGRO_BPS_TO_SECS is always 60" verbose="Argument &amp;#039;30*(cyclenum+2)&amp;#039; to function ALLEGRO_BPS_TO_SECS is always 60">
            <location file="demos/speed/main.c" line="64" info="Argument &amp;#039;30*(cyclenum+2)&amp;#039; to function ALLEGRO_BPS_TO_SECS is always 60"/>
            <location file="demos/speed/main.c" line="49" info="Assignment &amp;#039;cyclenum=0&amp;#039;, assigned value is 0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;m&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;m&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="demos/speed/message.c" line="39"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;j&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;j&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="demos/speed/player.c" line="59"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;f&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;f&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="demos/speed/sound.c" line="802"/>
        </error>
        <error id="unpreciseMathCall" severity="style" msg="Expression &amp;#039;log(1 + x)&amp;#039; can be replaced by &amp;#039;log1p(x)&amp;#039; to avoid loss of precision." verbose="Expression &amp;#039;log(1 + x)&amp;#039; can be replaced by &amp;#039;log1p(x)&amp;#039; to avoid loss of precision.">
            <location file="demos/speed/view.c" line="164"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;re&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;re&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="docs/scripts/dawk.c" line="204"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;dot&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;dot&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="docs/scripts/dawk.c" line="280"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;p&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;p&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="docs/scripts/make_doc.c" line="285"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;name_count&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;name_count&amp;#039; is assigned a value that is never used.">
            <location file="docs/scripts/make_man.c" line="117"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;output_level&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;output_level&amp;#039; is assigned a value that is never used.">
            <location file="docs/scripts/make_man.c" line="118"/>
        </error>
        <error id="memleakOnRealloc" severity="error" msg="Common realloc mistake: &amp;#039;names&amp;#039; nulled but not freed upon failure" verbose="Common realloc mistake: &amp;#039;names&amp;#039; nulled but not freed upon failure">
            <location file="docs/scripts/make_search_index.c" line="17"/>
        </error>
        <error id="memleakOnRealloc" severity="error" msg="Common realloc mistake: &amp;#039;urls&amp;#039; nulled but not freed upon failure" verbose="Common realloc mistake: &amp;#039;urls&amp;#039; nulled but not freed upon failure">
            <location file="docs/scripts/make_search_index.c" line="18"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;i&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;i&amp;#039; shadows outer variable">
            <location file="docs/scripts/make_search_index.c" line="31" info="Shadow variable"/>
            <location file="docs/scripts/make_search_index.c" line="25" info="Shadowed declaration"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;buffer&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;buffer&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="docs/scripts/make_single.c" line="158"/>
        </error>
        <error id="memleakOnRealloc" severity="error" msg="Common realloc mistake: &amp;#039;new_argv&amp;#039; nulled but not freed upon failure" verbose="Common realloc mistake: &amp;#039;new_argv&amp;#039; nulled but not freed upon failure">
            <location file="docs/scripts/scan_examples.c" line="227"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="docs/scripts/scan_examples.c" line="176"/>
        </error>
        <error id="duplicateBreak" severity="style" msg="Consecutive return, break, continue, goto or throw statements are unnecessary." verbose="Consecutive return, break, continue, goto or throw statements are unnecessary. The second statement can never be executed, and so should be removed.">
            <location file="docs/scripts/trex.c" line="460"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;stop&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;stop&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="docs/scripts/trex.c" line="407"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;chain&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;chain&amp;#039; is assigned a value that is never used.">
            <location file="docs/scripts/trex.c" line="218"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;first&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;first&amp;#039; is assigned a value that is never used.">
            <location file="docs/scripts/trex.c" line="219"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;t&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;t&amp;#039; is assigned a value that is never used.">
            <location file="docs/scripts/trex.c" line="560"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;display&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;display&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="examples/common.c" line="33"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;display&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;display&amp;#039; shadows outer variable">
            <location file="examples/common.c" line="33" info="Shadow variable"/>
            <location file="examples/ex_audio_timer.c" line="18" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;queue&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;queue&amp;#039; shadows outer variable">
            <location file="examples/common.c" line="66" info="Shadow variable"/>
            <location file="examples/ex_fs_window.c" line="10" info="Shadowed declaration"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;image2&amp;#039; is always true" verbose="Condition &amp;#039;image2&amp;#039; is always true">
            <location file="examples/ex_android.c" line="124" info="Condition &amp;#039;image2&amp;#039; is always true"/>
            <location file="examples/ex_android.c" line="119" info="Assignment &amp;#039;image2=image&amp;#039;, assigned value is 0"/>
            <location file="examples/ex_android.c" line="92" info="Assuming that condition &amp;#039;!image&amp;#039; is not redundant"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Prog::dpy&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Prog::dpy&amp;#039; is not initialized in the constructor.">
            <location file="examples/ex_audio_chain.cpp" line="674"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Prog::queue&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Prog::queue&amp;#039; is not initialized in the constructor.">
            <location file="examples/ex_audio_chain.cpp" line="674"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Prog::ctx&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Prog::ctx&amp;#039; is not initialized in the constructor.">
            <location file="examples/ex_audio_chain.cpp" line="674"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Prog::connect_x&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Prog::connect_x&amp;#039; is not initialized in the constructor.">
            <location file="examples/ex_audio_chain.cpp" line="674"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Prog::connect_y&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Prog::connect_y&amp;#039; is not initialized in the constructor.">
            <location file="examples/ex_audio_chain.cpp" line="674"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Sample&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Sample&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="examples/ex_audio_chain.cpp" line="136"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Audiostream&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Audiostream&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="examples/ex_audio_chain.cpp" line="148"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;is_playing&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;is_playing&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier.">
            <location file="examples/ex_audio_chain.cpp" line="82" info="Function in derived class"/>
            <location file="examples/ex_audio_chain.cpp" line="50" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;toggle_playing&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;toggle_playing&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier.">
            <location file="examples/ex_audio_chain.cpp" line="83" info="Function in derived class"/>
            <location file="examples/ex_audio_chain.cpp" line="51" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;get_gain&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;get_gain&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier.">
            <location file="examples/ex_audio_chain.cpp" line="84" info="Function in derived class"/>
            <location file="examples/ex_audio_chain.cpp" line="52" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;adjust_gain&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;adjust_gain&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier.">
            <location file="examples/ex_audio_chain.cpp" line="85" info="Function in derived class"/>
            <location file="examples/ex_audio_chain.cpp" line="53" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;get_label&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;get_label&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier.">
            <location file="examples/ex_audio_chain.cpp" line="86" info="Function in derived class"/>
            <location file="examples/ex_audio_chain.cpp" line="60" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;do_attach&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;do_attach&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier.">
            <location file="examples/ex_audio_chain.cpp" line="88" info="Function in derived class"/>
            <location file="examples/ex_audio_chain.cpp" line="68" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;do_attach&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;do_attach&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier.">
            <location file="examples/ex_audio_chain.cpp" line="89" info="Function in derived class"/>
            <location file="examples/ex_audio_chain.cpp" line="69" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;do_attach&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;do_attach&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier.">
            <location file="examples/ex_audio_chain.cpp" line="90" info="Function in derived class"/>
            <location file="examples/ex_audio_chain.cpp" line="70" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;do_detach&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;do_detach&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier.">
            <location file="examples/ex_audio_chain.cpp" line="91" info="Function in derived class"/>
            <location file="examples/ex_audio_chain.cpp" line="71" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;is_playing&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;is_playing&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier.">
            <location file="examples/ex_audio_chain.cpp" line="101" info="Function in derived class"/>
            <location file="examples/ex_audio_chain.cpp" line="50" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;toggle_playing&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;toggle_playing&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier.">
            <location file="examples/ex_audio_chain.cpp" line="102" info="Function in derived class"/>
            <location file="examples/ex_audio_chain.cpp" line="51" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;get_gain&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;get_gain&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier.">
            <location file="examples/ex_audio_chain.cpp" line="103" info="Function in derived class"/>
            <location file="examples/ex_audio_chain.cpp" line="52" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;adjust_gain&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;adjust_gain&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier.">
            <location file="examples/ex_audio_chain.cpp" line="104" info="Function in derived class"/>
            <location file="examples/ex_audio_chain.cpp" line="53" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;get_label&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;get_label&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier.">
            <location file="examples/ex_audio_chain.cpp" line="105" info="Function in derived class"/>
            <location file="examples/ex_audio_chain.cpp" line="60" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;do_attach&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;do_attach&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier.">
            <location file="examples/ex_audio_chain.cpp" line="107" info="Function in derived class"/>
            <location file="examples/ex_audio_chain.cpp" line="68" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;do_attach&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;do_attach&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier.">
            <location file="examples/ex_audio_chain.cpp" line="108" info="Function in derived class"/>
            <location file="examples/ex_audio_chain.cpp" line="69" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;do_attach&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;do_attach&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier.">
            <location file="examples/ex_audio_chain.cpp" line="109" info="Function in derived class"/>
            <location file="examples/ex_audio_chain.cpp" line="70" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;do_detach&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;do_detach&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier.">
            <location file="examples/ex_audio_chain.cpp" line="110" info="Function in derived class"/>
            <location file="examples/ex_audio_chain.cpp" line="71" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;is_playing&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;is_playing&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier.">
            <location file="examples/ex_audio_chain.cpp" line="120" info="Function in derived class"/>
            <location file="examples/ex_audio_chain.cpp" line="50" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;toggle_playing&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;toggle_playing&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier.">
            <location file="examples/ex_audio_chain.cpp" line="121" info="Function in derived class"/>
            <location file="examples/ex_audio_chain.cpp" line="51" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;get_gain&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;get_gain&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier.">
            <location file="examples/ex_audio_chain.cpp" line="122" info="Function in derived class"/>
            <location file="examples/ex_audio_chain.cpp" line="52" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;adjust_gain&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;adjust_gain&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier.">
            <location file="examples/ex_audio_chain.cpp" line="123" info="Function in derived class"/>
            <location file="examples/ex_audio_chain.cpp" line="53" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;get_label&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;get_label&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier.">
            <location file="examples/ex_audio_chain.cpp" line="124" info="Function in derived class"/>
            <location file="examples/ex_audio_chain.cpp" line="60" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;do_detach&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;do_detach&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier.">
            <location file="examples/ex_audio_chain.cpp" line="127" info="Function in derived class"/>
            <location file="examples/ex_audio_chain.cpp" line="71" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;is_playing&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;is_playing&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier.">
            <location file="examples/ex_audio_chain.cpp" line="152" info="Function in derived class"/>
            <location file="examples/ex_audio_chain.cpp" line="50" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;toggle_playing&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;toggle_playing&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier.">
            <location file="examples/ex_audio_chain.cpp" line="153" info="Function in derived class"/>
            <location file="examples/ex_audio_chain.cpp" line="51" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;get_gain&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;get_gain&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier.">
            <location file="examples/ex_audio_chain.cpp" line="154" info="Function in derived class"/>
            <location file="examples/ex_audio_chain.cpp" line="52" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;adjust_gain&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;adjust_gain&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier.">
            <location file="examples/ex_audio_chain.cpp" line="155" info="Function in derived class"/>
            <location file="examples/ex_audio_chain.cpp" line="53" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;get_label&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;get_label&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier.">
            <location file="examples/ex_audio_chain.cpp" line="156" info="Function in derived class"/>
            <location file="examples/ex_audio_chain.cpp" line="60" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;do_detach&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;do_detach&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier.">
            <location file="examples/ex_audio_chain.cpp" line="158" info="Function in derived class"/>
            <location file="examples/ex_audio_chain.cpp" line="71" info="Virtual function in base class"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code.">
            <location file="examples/ex_audio_chain.cpp" line="948"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code.">
            <location file="examples/ex_audio_chain.cpp" line="957"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code.">
            <location file="examples/ex_audio_chain.cpp" line="962"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code.">
            <location file="examples/ex_audio_chain.cpp" line="976"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;draw&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;draw&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier.">
            <location file="examples/nihgui.hpp" line="137" info="Function in derived class"/>
            <location file="examples/nihgui.hpp" line="65" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;want_mouse_focus&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;want_mouse_focus&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier.">
            <location file="examples/nihgui.hpp" line="138" info="Function in derived class"/>
            <location file="examples/nihgui.hpp" line="51" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;on_mouse_button_down&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;on_mouse_button_down&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier.">
            <location file="examples/nihgui.hpp" line="148" info="Function in derived class"/>
            <location file="examples/nihgui.hpp" line="54" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;on_mouse_button_up&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;on_mouse_button_up&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier.">
            <location file="examples/nihgui.hpp" line="149" info="Function in derived class"/>
            <location file="examples/nihgui.hpp" line="56" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;draw&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;draw&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier.">
            <location file="examples/nihgui.hpp" line="150" info="Function in derived class"/>
            <location file="examples/nihgui.hpp" line="65" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;on_mouse_button_down&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;on_mouse_button_down&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier.">
            <location file="examples/nihgui.hpp" line="158" info="Function in derived class"/>
            <location file="examples/nihgui.hpp" line="148" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;on_mouse_button_up&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;on_mouse_button_up&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier.">
            <location file="examples/nihgui.hpp" line="159" info="Function in derived class"/>
            <location file="examples/nihgui.hpp" line="149" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;want_key_focus&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;want_key_focus&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier.">
            <location file="examples/nihgui.hpp" line="173" info="Function in derived class"/>
            <location file="examples/nihgui.hpp" line="59" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;on_key_down&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;on_key_down&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier.">
            <location file="examples/nihgui.hpp" line="174" info="Function in derived class"/>
            <location file="examples/nihgui.hpp" line="62" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;on_click&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;on_click&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier.">
            <location file="examples/nihgui.hpp" line="175" info="Function in derived class"/>
            <location file="examples/nihgui.hpp" line="57" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;draw&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;draw&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier.">
            <location file="examples/nihgui.hpp" line="176" info="Function in derived class"/>
            <location file="examples/nihgui.hpp" line="65" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;on_mouse_button_down&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;on_mouse_button_down&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier.">
            <location file="examples/nihgui.hpp" line="192" info="Function in derived class"/>
            <location file="examples/nihgui.hpp" line="54" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;on_mouse_button_hold&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;on_mouse_button_hold&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier.">
            <location file="examples/nihgui.hpp" line="193" info="Function in derived class"/>
            <location file="examples/nihgui.hpp" line="55" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;draw&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;draw&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier.">
            <location file="examples/nihgui.hpp" line="194" info="Function in derived class"/>
            <location file="examples/nihgui.hpp" line="65" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;on_mouse_button_down&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;on_mouse_button_down&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier.">
            <location file="examples/nihgui.hpp" line="209" info="Function in derived class"/>
            <location file="examples/nihgui.hpp" line="54" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;on_mouse_button_hold&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;on_mouse_button_hold&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier.">
            <location file="examples/nihgui.hpp" line="210" info="Function in derived class"/>
            <location file="examples/nihgui.hpp" line="55" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;draw&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;draw&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier.">
            <location file="examples/nihgui.hpp" line="211" info="Function in derived class"/>
            <location file="examples/nihgui.hpp" line="65" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;want_key_focus&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;want_key_focus&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier.">
            <location file="examples/nihgui.hpp" line="231" info="Function in derived class"/>
            <location file="examples/nihgui.hpp" line="59" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;got_key_focus&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;got_key_focus&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier.">
            <location file="examples/nihgui.hpp" line="232" info="Function in derived class"/>
            <location file="examples/nihgui.hpp" line="60" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;lost_key_focus&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;lost_key_focus&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier.">
            <location file="examples/nihgui.hpp" line="233" info="Function in derived class"/>
            <location file="examples/nihgui.hpp" line="61" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;on_key_down&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;on_key_down&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier.">
            <location file="examples/nihgui.hpp" line="234" info="Function in derived class"/>
            <location file="examples/nihgui.hpp" line="62" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;draw&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;draw&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier.">
            <location file="examples/nihgui.hpp" line="235" info="Function in derived class"/>
            <location file="examples/nihgui.hpp" line="65" info="Virtual function in base class"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;vol&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;vol&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="examples/ex_audio_timer.c" line="37"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ramp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ramp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="examples/ex_audio_timer.c" line="37"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="examples/ex_blend_bench.c" line="130"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned expression &amp;#039;cf-&amp;gt;buffer_pos-size&amp;#039; is less than zero." verbose="The unsigned expression &amp;#039;cf-&amp;gt;buffer_pos-size&amp;#039; will never be negative so it is either pointless or an error to check if it is.">
            <location file="examples/ex_curl.c" line="217"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;next&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;next&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="examples/ex_dir.c" line="32"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file="examples/ex_dir.c" line="18"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file="examples/ex_dir.c" line="19"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file="examples/ex_dir.c" line="20"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file="examples/ex_dir.c" line="21"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file="examples/ex_dir.c" line="22"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file="examples/ex_dir.c" line="23"/>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &amp;#039;b&amp;#039; shadows outer argument" verbose="Local variable &amp;#039;b&amp;#039; shadows outer argument">
            <location file="examples/ex_draw.c" line="54" info="Shadow variable"/>
            <location file="examples/ex_draw.c" line="41" info="Shadowed declaration"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file="examples/ex_draw.c" line="53"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="examples/ex_draw_bitmap.c" line="9"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;now&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;now&amp;#039; is assigned a value that is never used.">
            <location file="examples/ex_drawpixels.c" line="61"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;port&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;port&amp;#039; shadows outer variable">
            <location file="examples/ex_enet_server.c" line="195" info="Shadow variable"/>
            <location file="examples/ex_enet_server.c" line="21" info="Shadowed declaration"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Prog::tick&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Prog::tick&amp;#039; is not initialized in the constructor.">
            <location file="examples/ex_font_multiline.cpp" line="57"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;handle_event&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;handle_event&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier.">
            <location file="examples/ex_font_multiline.cpp" line="54" info="Function in derived class"/>
            <location file="examples/nihgui.hpp" line="75" info="Virtual function in base class"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;button&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;button&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="examples/ex_haiku.c" line="844"/>
        </error>
        <error id="shadowFunction" severity="style" msg="Local variable &amp;#039;anim&amp;#039; shadows outer function" verbose="Local variable &amp;#039;anim&amp;#039; shadows outer function">
            <location file="examples/ex_haiku.c" line="334" info="Shadow variable"/>
            <location file="examples/ex_haiku.c" line="376" info="Shadowed declaration"/>
        </error>
        <error id="shadowFunction" severity="style" msg="Local variable &amp;#039;anim&amp;#039; shadows outer function" verbose="Local variable &amp;#039;anim&amp;#039; shadows outer function">
            <location file="examples/ex_haiku.c" line="362" info="Shadow variable"/>
            <location file="examples/ex_haiku.c" line="376" info="Shadowed declaration"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;PlayButton&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;PlayButton&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="examples/ex_haptic2.cpp" line="126"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;StopButton&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;StopButton&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="examples/ex_haptic2.cpp" line="149"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;on_click&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;on_click&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier.">
            <location file="examples/ex_haptic2.cpp" line="131" info="Function in derived class"/>
            <location file="examples/nihgui.hpp" line="57" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;on_click&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;on_click&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier.">
            <location file="examples/ex_haptic2.cpp" line="154" info="Function in derived class"/>
            <location file="examples/nihgui.hpp" line="57" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;on_play&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;on_play&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier.">
            <location file="examples/ex_haptic2.cpp" line="267" info="Function in derived class"/>
            <location file="examples/ex_haptic2.cpp" line="117" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;on_stop&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;on_stop&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier.">
            <location file="examples/ex_haptic2.cpp" line="268" info="Function in derived class"/>
            <location file="examples/ex_haptic2.cpp" line="118" info="Virtual function in base class"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="examples/ex_joystick_events.c" line="74"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;x&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;x&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="examples/ex_joystick_hotplugging.c" line="36"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;y&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;y&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="examples/ex_joystick_hotplugging.c" line="37"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="examples/ex_joystick_hotplugging.c" line="39"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="examples/ex_loading_thread.c" line="183"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bw&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bw&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="examples/ex_loading_thread.c" line="205"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ptr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ptr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="examples/ex_lockbitmap.c" line="22"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;col&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;col&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="examples/ex_lockbitmap.c" line="44"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="examples/ex_logo.c" line="276"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;logo&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;logo&amp;#039; shadows outer variable">
            <location file="examples/ex_logo.c" line="75" info="Shadow variable"/>
            <location file="examples/ex_logo.c" line="21" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;c&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;c&amp;#039; shadows outer variable">
            <location file="examples/ex_logo.c" line="135" info="Shadow variable"/>
            <location file="examples/ex_logo.c" line="72" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;menu&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;menu&amp;#039; shadows outer variable">
            <location file="examples/ex_menu.c" line="185" info="Shadow variable"/>
            <location file="examples/ex_menu.c" line="67" info="Shadowed declaration"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;ALLEGRO_GTK_TOPLEVEL&amp;#039; since the value of &amp;#039;ALLEGRO_GTK_TOPLEVEL&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;ALLEGRO_GTK_TOPLEVEL&amp;#039; since the value of &amp;#039;ALLEGRO_GTK_TOPLEVEL&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="examples/ex_menu.c" line="92"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;argc&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;argc&amp;#039; is assigned a value that is never used.">
            <location file="examples/ex_mixer_chain.c" line="37"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;i&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;i&amp;#039; shadows outer variable">
            <location file="examples/ex_multiwin.c" line="82" info="Shadow variable"/>
            <location file="examples/ex_multiwin.c" line="18" info="Shadowed declaration"/>
        </error>
        <error id="shadowFunction" severity="style" msg="Local variable &amp;#039;close_log&amp;#039; shadows outer function" verbose="Local variable &amp;#039;close_log&amp;#039; shadows outer function">
            <location file="examples/ex_native_filechooser.c" line="169" info="Shadow variable"/>
            <location file="examples/common.c" line="12" info="Shadowed declaration"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;button&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;button&amp;#039; is assigned a value that is never used.">
            <location file="examples/ex_native_filechooser.c" line="81"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Application::mWindow&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Application::mWindow&amp;#039; is not initialized in the constructor.">
            <location file="examples/ex_ogre3d.cpp" line="62"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Application::mSceneMgr&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Application::mSceneMgr&amp;#039; is not initialized in the constructor.">
            <location file="examples/ex_ogre3d.cpp" line="62"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Application::mCamera&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Application::mCamera&amp;#039; is not initialized in the constructor.">
            <location file="examples/ex_ogre3d.cpp" line="62"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Example&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Example&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided.">
            <location file="examples/ex_ogre3d.cpp" line="191"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;createScene&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;createScene&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier.">
            <location file="examples/ex_ogre3d.cpp" line="197" info="Function in derived class"/>
            <location file="examples/ex_ogre3d.cpp" line="158" info="Virtual function in base class"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;pos&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;pos&amp;#039; shadows outer variable">
            <location file="examples/ex_palette.c" line="204" info="Shadow variable"/>
            <location file="examples/ex_palette.c" line="189" info="Shadowed declaration"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;next&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;next&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="examples/ex_physfs.c" line="63"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file="examples/ex_physfs.c" line="49"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file="examples/ex_physfs.c" line="50"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file="examples/ex_physfs.c" line="51"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file="examples/ex_physfs.c" line="52"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file="examples/ex_physfs.c" line="53"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file="examples/ex_physfs.c" line="54"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;x&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;x&amp;#039; shadows outer variable">
            <location file="examples/ex_premulalpha.c" line="87" info="Shadow variable"/>
            <location file="examples/ex_premulalpha.c" line="19" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;y&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;y&amp;#039; shadows outer variable">
            <location file="examples/ex_premulalpha.c" line="87" info="Shadow variable"/>
            <location file="examples/ex_premulalpha.c" line="19" info="Shadowed declaration"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ii&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ii&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="examples/ex_prim.c" line="564"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;vtx&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;vtx&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="examples/ex_prim.c" line="566"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;z&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;z&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="examples/ex_prim_shader.c" line="29"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;i&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;i&amp;#039; shadows outer variable">
            <location file="examples/ex_resample_test.c" line="115" info="Shadow variable"/>
            <location file="examples/ex_resample_test.c" line="28" info="Shadowed declaration"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file="examples/ex_resize2.c" line="69"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;src_bmp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;src_bmp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="examples/ex_rotate.c" line="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;k&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;k&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="examples/ex_rotate.c" line="25"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;k&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;k&amp;#039; is assigned a value that is never used.">
            <location file="examples/ex_rotate.c" line="25"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;src_bmp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;src_bmp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="examples/ex_scale.c" line="21"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;k&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;k&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="examples/ex_scale.c" line="27"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;k&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;k&amp;#039; is assigned a value that is never used.">
            <location file="examples/ex_scale.c" line="27"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;!pixel_file&amp;#039; is always true" verbose="Condition &amp;#039;!pixel_file&amp;#039; is always true">
            <location file="examples/ex_shader_multitex.c" line="69" info="Condition &amp;#039;!pixel_file&amp;#039; is always true"/>
            <location file="examples/ex_shader_multitex.c" line="27" info="Assignment &amp;#039;pixel_file=NULL&amp;#039;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;loop&amp;#039; is always true" verbose="Condition &amp;#039;loop&amp;#039; is always true">
            <location file="examples/ex_stream_file.c" line="99" info="Condition &amp;#039;loop&amp;#039; is always true"/>
            <location file="examples/ex_stream_file.c" line="98" info="Assuming that condition &amp;#039;loop&amp;#039; is not redundant"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: mixer" verbose="Unused variable: mixer">
            <location file="examples/ex_stream_file.c" line="29"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;s&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;s&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="examples/ex_stream_seek.c" line="235"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;on_click&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;on_click&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier.">
            <location file="examples/ex_synth.cpp" line="305" info="Function in derived class"/>
            <location file="examples/nihgui.hpp" line="57" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;handle_event&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;handle_event&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier.">
            <location file="examples/ex_synth.cpp" line="340" info="Function in derived class"/>
            <location file="examples/nihgui.hpp" line="75" info="Virtual function in base class"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="examples/ex_timedwait.c" line="82"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;done&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;done&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="examples/ex_vertex_buffer.c" line="89"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;need_redraw&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;need_redraw&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="examples/ex_vertex_buffer.c" line="90"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;background&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;background&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="examples/ex_vertex_buffer.c" line="91"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;dynamic_buffers&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;dynamic_buffers&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="examples/ex_vertex_buffer.c" line="92"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;num_methods&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;num_methods&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="examples/ex_vertex_buffer.c" line="93"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;num_x&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;num_x&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="examples/ex_vertex_buffer.c" line="94"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;num_y&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;num_y&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="examples/ex_vertex_buffer.c" line="95"/>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &amp;#039;&amp;amp;&amp;#039; and &amp;#039;?&amp;#039;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &amp;#039;&amp;#039;a&amp;amp;b?c:d&amp;#039;&amp;#039; should be written as either &amp;#039;&amp;#039;(a&amp;amp;b)?c:d&amp;#039;&amp;#039; or &amp;#039;&amp;#039;a&amp;amp;(b?c:d)&amp;#039;&amp;#039;.">
            <location file="examples/ex_vertex_buffer.c" line="49"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;text&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;text&amp;#039; is reassigned a value before the old one has been used.">
            <location file="examples/ex_window_title.c" line="65" info="text is overwritten"/>
            <location file="examples/ex_window_title.c" line="47" info="text is assigned"/>
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &amp;#039;text&amp;#039; should be passed by const reference." verbose="Parameter &amp;#039;text&amp;#039; is passed by value. It could be passed as a const reference which is usually faster and recommended in C++.">
            <location file="examples/nihgui.cpp" line="376"/>
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &amp;#039;new_text&amp;#039; should be passed by const reference." verbose="Parameter &amp;#039;new_text&amp;#039; is passed by value. It could be passed as a const reference which is usually faster and recommended in C++.">
            <location file="examples/nihgui.cpp" line="402"/>
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &amp;#039;text&amp;#039; should be passed by const reference." verbose="Parameter &amp;#039;text&amp;#039; is passed by value. It could be passed as a const reference which is usually faster and recommended in C++.">
            <location file="examples/nihgui.cpp" line="414"/>
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &amp;#039;text&amp;#039; should be passed by const reference." verbose="Parameter &amp;#039;text&amp;#039; is passed by value. It could be passed as a const reference which is usually faster and recommended in C++.">
            <location file="examples/nihgui.cpp" line="487"/>
        </error>
        <error id="resourceLeak" severity="error" msg="Resource leak: fout" verbose="Resource leak: fout">
            <location file="misc/msvchelp.c" line="43"/>
        </error>
        <error id="getsCalled" severity="warning" msg="Obsolete function &amp;#039;gets&amp;#039; called. It is recommended to use &amp;#039;fgets&amp;#039; or &amp;#039;gets_s&amp;#039; instead." verbose="The obsolete function &amp;#039;gets&amp;#039; is called. With &amp;#039;gets&amp;#039; you&amp;#039;ll get a buffer overrun if the input data exceeds the size of the buffer. It is recommended to use the functions &amp;#039;fgets&amp;#039; or &amp;#039;gets_s&amp;#039; instead.">
            <location file="misc/vcvars.c" line="78"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="src/bitmap.c" line="31"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="src/bitmap_io.c" line="24"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="src/bitmap_pixel.c" line="22"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;ALLEGRO_HAVE_SYSCONF;_SC_NPROCESSORS_ONLN&amp;#039; since the value of &amp;#039;_SC_NPROCESSORS_ONLN&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;ALLEGRO_HAVE_SYSCONF;_SC_NPROCESSORS_ONLN&amp;#039; since the value of &amp;#039;_SC_NPROCESSORS_ONLN&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="src/cpu.c" line="53"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;ALLEGRO_HAVE_SYSCONF;_SC_PAGESIZE;_SC_PHYS_PAGES&amp;#039; since the value of &amp;#039;_SC_PAGESIZE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;ALLEGRO_HAVE_SYSCONF;_SC_PAGESIZE;_SC_PHYS_PAGES&amp;#039; since the value of &amp;#039;_SC_PAGESIZE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="src/cpu.c" line="81"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;ALLEGRO_HAVE_SYSCONF;_SC_PAGESIZE;_SC_PHYS_PAGES&amp;#039; since the value of &amp;#039;_SC_PHYS_PAGES&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;ALLEGRO_HAVE_SYSCONF;_SC_PAGESIZE;_SC_PHYS_PAGES&amp;#039; since the value of &amp;#039;_SC_PHYS_PAGES&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="src/cpu.c" line="80"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;ALLEGRO_HAVE_SYSCTL;HW_AVAILCPU&amp;#039; since the value of &amp;#039;HW_AVAILCPU&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;ALLEGRO_HAVE_SYSCTL;HW_AVAILCPU&amp;#039; since the value of &amp;#039;HW_AVAILCPU&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="src/cpu.c" line="56"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;ALLEGRO_HAVE_SYSCTL;HW_MEMSIZE&amp;#039; since the value of &amp;#039;HW_MEMSIZE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;ALLEGRO_HAVE_SYSCTL;HW_MEMSIZE&amp;#039; since the value of &amp;#039;HW_MEMSIZE&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="src/cpu.c" line="90"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;ALLEGRO_HAVE_SYSCTL;HW_NCPU&amp;#039; since the value of &amp;#039;HW_NCPU&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;ALLEGRO_HAVE_SYSCTL;HW_NCPU&amp;#039; since the value of &amp;#039;HW_NCPU&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="src/cpu.c" line="58"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;ALLEGRO_HAVE_SYSCTL;HW_PHYSMEM&amp;#039; since the value of &amp;#039;HW_PHYSMEM&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;ALLEGRO_HAVE_SYSCTL;HW_PHYSMEM&amp;#039; since the value of &amp;#039;HW_PHYSMEM&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="src/cpu.c" line="88"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;ALLEGRO_HAVE_SYSCTL;HW_REALMEM&amp;#039; since the value of &amp;#039;HW_REALMEM&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;ALLEGRO_HAVE_SYSCTL;HW_REALMEM&amp;#039; since the value of &amp;#039;HW_REALMEM&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="src/cpu.c" line="86"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;got_all&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;got_all&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src/debug.c" line="90"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="src/display.c" line="33"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="src/display_settings.c" line="24"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;slot&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;slot&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src/events.c" line="164"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;new_event&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;new_event&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src/events.c" line="599"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;event&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;event&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src/events.c" line="629"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;old_event&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;old_event&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src/events.c" line="664"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;refcount&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;refcount&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src/events.c" line="711"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;slot&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;slot&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src/evtsrc.c" line="182"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;num_queues&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;num_queues&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src/evtsrc.c" line="220"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ustr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ustr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src/file.c" line="546"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;size&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;size&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src/file.c" line="547"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;success&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;success&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src/file.c" line="548"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;args&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;args&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src/file.c" line="579"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;ustr&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;ustr&amp;#039; is assigned a value that is never used.">
            <location file="src/file.c" line="546"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;size&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;size&amp;#039; is assigned a value that is never used.">
            <location file="src/file.c" line="547"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="src/file_stdio.c" line="42"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="src/fshook_stdio.c" line="33"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;ALLEGRO_MACOSX;UF_HIDDEN&amp;#039; since the value of &amp;#039;UF_HIDDEN&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;ALLEGRO_MACOSX;UF_HIDDEN&amp;#039; since the value of &amp;#039;UF_HIDDEN&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="src/fshook_stdio.c" line="335"/>
        </error>
        <error id="preprocessorErrorDirective" severity="error" msg="No header in #include" verbose="No header in #include">
            <location file="src/inline.c" line="33"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned expression &amp;#039;n&amp;#039; is less than zero." verbose="The unsigned expression &amp;#039;n&amp;#039; will never be negative so it is either pointless or an error to check if it is.">
            <location file="src/libc.c" line="81"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tmp&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src/memblit.c" line="171"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;dw&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;dw&amp;#039; is assigned a value that is never used.">
            <location file="src/memblit.c" line="282"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;dh&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;dh&amp;#039; is assigned a value that is never used.">
            <location file="src/memblit.c" line="282"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="src/pixels.c" line="21"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="src/shader.c" line="27"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="src/system.c" line="39"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;tls-&amp;gt;new_display_adapter&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;tls-&amp;gt;new_display_adapter&amp;#039; is reassigned a value before the old one has been used.">
            <location file="src/tls.c" line="306" info="tls-&amp;gt;new_display_adapter is overwritten"/>
            <location file="src/tls.c" line="304" info="tls-&amp;gt;new_display_adapter is assigned"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;display&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;display&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src/transformations.c" line="43"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="src/tri_soft.c" line="28"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src/utf8.c" line="241"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src/utf8.c" line="262"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src/utf8.c" line="493"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src/utf8.c" line="722"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src/utf8.c" line="772"/>
        </error>
        <error id="va_list_usedBeforeStarted" severity="error" msg="va_list &amp;#039;arglist&amp;#039; used before va_start() was called." verbose="va_list &amp;#039;arglist&amp;#039; used before va_start() was called.">
            <location file="src/utf8.c" line="504"/>
        </error>
        <error id="va_list_usedBeforeStarted" severity="error" msg="va_list &amp;#039;arglist&amp;#039; used before va_start() was called." verbose="va_list &amp;#039;arglist&amp;#039; used before va_start() was called.">
            <location file="src/utf8.c" line="505"/>
        </error>
        <error id="va_list_usedBeforeStarted" severity="error" msg="va_list &amp;#039;arglist&amp;#039; used before va_start() was called." verbose="va_list &amp;#039;arglist&amp;#039; used before va_start() was called.">
            <location file="src/utf8.c" line="506"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="src/android/android_apk_file.c" line="7"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="src/android/android_apk_fs.c" line="14"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="src/android/android_clipboard.c" line="28"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="src/android/android_display.c" line="28"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="src/android/android_image.c" line="23"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="src/android/android_joystick.c" line="7"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="src/android/android_keyboard.c" line="8"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="src/android/android_touch.c" line="25"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="src/android/jni_helpers.c" line="22"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="src/gp2xwiz/wiz_display_fb.c" line="21"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="src/gp2xwiz/wiz_display_opengl.c" line="21"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="src/iphone/iphone_system.c" line="5"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;fd&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;fd&amp;#039; is reassigned a value before the old one has been used.">
            <location file="src/linux/lconsole.c" line="199" info="fd is overwritten"/>
            <location file="src/linux/lconsole.c" line="152" info="fd is assigned"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;msg&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;msg&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src/linux/lconsole.c" line="239"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src/linux/lconsole.c" line="240"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="src/linux/lhaptic.c" line="36"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;nr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;nr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src/linux/ljoynu.c" line="917"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="src/linux/lkeybdnu.c" line="56"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;ABS_WHEEL;ALLEGRO_HAVE_LINUX_INPUT_H&amp;#039; since the value of &amp;#039;ABS_WHEEL&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;ABS_WHEEL;ALLEGRO_HAVE_LINUX_INPUT_H&amp;#039; since the value of &amp;#039;ABS_WHEEL&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="src/linux/lmseev.c" line="381"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;ABS_WHEEL;ALLEGRO_HAVE_LINUX_INPUT_H&amp;#039; since the value of &amp;#039;ABS_WHEEL&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;ABS_WHEEL;ALLEGRO_HAVE_LINUX_INPUT_H&amp;#039; since the value of &amp;#039;ABS_WHEEL&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="src/linux/lmseev.c" line="468"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;nr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;nr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src/linux/lmseev.c" line="768"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;ALLEGRO_HAVE_LINUX_INPUT_H;REL_WHEEL&amp;#039; since the value of &amp;#039;REL_WHEEL&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;ALLEGRO_HAVE_LINUX_INPUT_H;REL_WHEEL&amp;#039; since the value of &amp;#039;REL_WHEEL&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="src/linux/lmseev.c" line="437"/>
        </error>
        <error id="identicalInnerCondition" severity="warning" msg="Identical inner &amp;#039;if&amp;#039; condition is always true." verbose="Identical inner &amp;#039;if&amp;#039; condition is always true (outer condition is &amp;#039;i&amp;gt;=buff-&amp;gt;slen&amp;#039; and inner condition is &amp;#039;i&amp;gt;=buff-&amp;gt;slen&amp;#039;).">
            <location file="src/misc/bstrlib.c" line="2320" info="identical inner condition: i&amp;gt;=buff-&amp;gt;slen"/>
            <location file="src/misc/bstrlib.c" line="2318" info="outer condition: i&amp;gt;=buff-&amp;gt;slen"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src/misc/bstrlib.c" line="643"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;v&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;v&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src/misc/bstrlib.c" line="889"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src/misc/bstrlib.c" line="919"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;v&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;v&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src/misc/bstrlib.c" line="919"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pd&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pd&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src/misc/bstrlib.c" line="1407"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src/misc/bstrlib.c" line="1509"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src/misc/bstrlib.c" line="1749"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;l&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;l&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src/misc/bstrlib.c" line="1771"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src/misc/bstrlib.c" line="1974"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src/misc/bstrlib.c" line="2038"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src/misc/bstrlib.c" line="2303"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;p&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;p&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src/misc/bstrlib.c" line="2303"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;p&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;p&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src/misc/bstrlib.c" line="2368"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src/misc/bstrlib.c" line="2513"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="src/opengl/extensions.c" line="45"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;start&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;start&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src/opengl/extensions.c" line="178"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;name&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;name&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src/opengl/extensions.c" line="203"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="src/opengl/ogl_bitmap.c" line="37"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="src/opengl/ogl_display.c" line="34"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="src/opengl/ogl_draw.c" line="28"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="src/opengl/ogl_fbo.c" line="32"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="src/opengl/ogl_lock.c" line="31"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="src/opengl/ogl_lock_es.c" line="35"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="src/opengl/ogl_render_state.c" line="6"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="src/opengl/ogl_shader.c" line="31"/>
        </error>
        <error id="redundantCondition" severity="style" msg="Redundant condition: disable_overscan. &amp;#039;!A || (A &amp;amp;&amp;amp; B)&amp;#039; is equivalent to &amp;#039;!A || B&amp;#039;" verbose="The condition &amp;#039;!disable_overscan || disable_overscan &amp;amp;&amp;amp; !strcasecmp(disable_overscan,&amp;quot;false&amp;quot;)||atoi(disable_overscan)==0&amp;#039; is equivalent to &amp;#039;!disable_overscan || !strcasecmp(disable_overscan,&amp;quot;false&amp;quot;)||atoi(disable_overscan)==0&amp;#039;.">
            <location file="src/raspberrypi/pidisplay.c" line="222"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="src/raspberrypi/pisystem.c" line="16"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="src/sdl/sdl_display.c" line="27"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="src/sdl/sdl_joystick.c" line="19"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="src/sdl/sdl_keyboard.c" line="19"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="src/sdl/sdl_mouse.c" line="19"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="src/sdl/sdl_system.c" line="20"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="src/sdl/sdl_thread.c" line="20"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="src/sdl/sdl_time.c" line="21"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="src/sdl/sdl_touch.c" line="19"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;wi&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;wi&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src/unix/ufdwatch.c" line="97"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;wi&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;wi&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src/unix/ufdwatch.c" line="169"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="src/unix/upath.c" line="42"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;frac&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;frac&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src/unix/utime.c" line="75"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If AL_INLINE_STATIC is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If AL_INLINE_STATIC is a macro then please configure it.">
            <location file="src/win/d3d.h" line="77"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="src/win/wclipboard.c" line="38"/>
        </error>
        <error id="CastIntegerToAddressAtReturn" severity="portability" msg="Returning an integer in a function with pointer return type is not portable." verbose="Returning an integer (int/long/etc) in a function with pointer return type is not portable across different platforms and compilers. For example in 32-bit Windows and Linux they are same width, but in 64-bit Windows and Linux they are of different width. In worst case you end up casting 64-bit integer down to 32-bit pointer. The safe way is to always return a pointer.">
            <location file="src/win/wgl_disp.c" line="699"/>
        </error>
        <error id="redundantCondition" severity="style" msg="Redundant condition: current_glrc. &amp;#039;!A || (A &amp;amp;&amp;amp; B)&amp;#039; is equivalent to &amp;#039;!A || B&amp;#039;" verbose="The condition &amp;#039;!current_glrc || current_glrc &amp;amp;&amp;amp; current_glrc!=wgl_disp-&amp;gt;glrc&amp;#039; is equivalent to &amp;#039;!current_glrc || current_glrc!=wgl_disp-&amp;gt;glrc&amp;#039;.">
            <location file="src/win/wgl_disp.c" line="1135"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &amp;#039;lock_time&amp;#039; is not assigned a value." verbose="Variable &amp;#039;lock_time&amp;#039; is not assigned a value.">
            <location file="src/win/wgl_disp.c" line="1248"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="src/win/whapall.c" line="40"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="src/win/whaptic.cpp" line="53"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="src/win/wjoydxnu.cpp" line="94"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;char_count&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;char_count&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src/win/wkeyboard.c" line="336"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;event_count&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;event_count&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src/win/wkeyboard.c" line="337"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src/win/wkeyboard.c" line="338"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ks_state&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ks_state&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src/win/wkeyboard.c" line="339"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;dst&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;dst&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="src/win/wmcursor.c" line="399"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="src/win/wsystem.c" line="38"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="src/win/wthread.c" line="31"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="src/win/wtouch_input.c" line="27"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="src/win/wunicode.c" line="21"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="src/win/wwindow.c" line="48"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="src/x/xclipboard.c" line="35"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="src/x/xevents.c" line="22"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="src/x/xfullscreen.c" line="9"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="src/x/xglx_config.c" line="13"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;glXCreateContextAttribsARB&amp;#039; since the value of &amp;#039;glXCreateContextAttribsARB&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;glXCreateContextAttribsARB&amp;#039; since the value of &amp;#039;glXCreateContextAttribsARB&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="src/x/xglx_config.c" line="498"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="src/x/xkeyboard.c" line="48"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="src/x/xmousenu.c" line="41"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="src/x/xrandr.c" line="9"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &amp;#039;temp&amp;#039; is not assigned a value." verbose="Variable &amp;#039;temp&amp;#039; is not assigned a value.">
            <location file="src/x/xsystem.c" line="364"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &amp;#039;version_min&amp;#039; is not assigned a value." verbose="Variable &amp;#039;version_min&amp;#039; is not assigned a value.">
            <location file="src/x/xsystem.c" line="364"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &amp;#039;version_max&amp;#039; is not assigned a value." verbose="Variable &amp;#039;version_max&amp;#039; is not assigned a value.">
            <location file="src/x/xsystem.c" line="364"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="src/x/xtouch.c" line="36"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ALLEGRO_DEBUG_CHANNEL is a macro then please configure it.">
            <location file="src/x/xwindow.c" line="18"/>
        </error>
        <error id="internalAstError" severity="error" msg="Syntax Error: AST broken, binary operator &amp;#039;=&amp;#039; doesn&amp;#039;t have two operands." verbose="Syntax Error: AST broken, binary operator &amp;#039;=&amp;#039; doesn&amp;#039;t have two operands.">
            <location file="tests/test_driver.c" line="366"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i_y&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i_y&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="tools/macosx/fixbundle.c" line="117"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;f_y&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;f_y&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="tools/macosx/fixbundle.c" line="118"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;a&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;a&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="tools/macosx/fixbundle.c" line="118"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: p" verbose="Unused variable: p">
            <location file="tools/macosx/fixbundle.c" line="120"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;rc_name&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;rc_name&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="tools/win/wfixicon.c" line="189"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;res_name&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;res_name&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="tools/win/wfixicon.c" line="189"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;str&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;str&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="tools/win/wfixicon.c" line="189"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;f&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;f&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="tools/win/wfixicon.c" line="197"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sx&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sx&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="tools/x11/xf2pcx.c" line="86"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;black&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;black&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="tools/x11/xf2pcx.c" line="87"/>
        </error>
    </errors>
</results>
